<?php/** * PHPExcel * * Copyright (C) 2006 - 2014 PHPExcel * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA * * @category   PHPExcel * @package    PHPExcel * @copyright  Copyright (c) 2006 - 2014 PHPExcel (http://www.codeplex.com/PHPExcel) * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt	LGPL * @version    1.8.0, 2014-03-02 */class ControllerReportExportCustomer extends Controller {	public function index() {/** Error reporting */error_reporting(E_ALL);ini_set('display_errors', TRUE);ini_set('display_startup_errors', TRUE);date_default_timezone_set('Europe/London');if (PHP_SAPI == 'cli')	die('This example should only be run from a Web Browser');/** Include PHPExcel */require_once dirname(__FILE__) . '/PHPExcel.php';		$this->load->language('sale/customer');		$this->load->model('sale/customer');					if (isset($this->request->get['filter_name'])) {			$filter_name = $this->request->get['filter_name'];		} else {			$filter_name = null;		}		if (isset($this->request->get['filter_email'])) {			$filter_email = $this->request->get['filter_email'];		} else {			$filter_email = null;		}				if (isset($this->request->get['filter_username'])) {			$filter_username = $this->request->get['filter_username'];		} else {			$filter_username = null;		}		if (isset($this->request->get['filter_phone'])) {			$filter_phone = $this->request->get['filter_phone'];		} else {			$filter_phone = null;		}		if (isset($this->request->get['filter_customer_group_id'])) {			$filter_customer_group_id = $this->request->get['filter_customer_group_id'];		} else {			$filter_customer_group_id = null;		}		if (isset($this->request->get['filter_status'])) {			$filter_status = $this->request->get['filter_status'];		} else {			$filter_status = null;		}		if (isset($this->request->get['filter_approved'])) {			$filter_approved = $this->request->get['filter_approved'];		} else {			$filter_approved = null;		}		if (isset($this->request->get['filter_ip'])) {			$filter_ip = $this->request->get['filter_ip'];		} else {			$filter_ip = null;		}		if (isset($this->request->get['filter_date_added'])) {			$filter_date_added = $this->request->get['filter_date_added'];		} else {			$filter_date_added = null;		}				if (isset($this->request->get['type_filter'])) {			$type_filter = $this->request->get['type_filter'];		} else {			$type_filter = null;		}				if (isset($this->request->get['month_filter'])) {			$month_filter = $this->request->get['month_filter'];		} else {			$date = strtotime(date('Y-m-d'));			$month_filter = date('m',$date);;		}				if (isset($this->request->get['year_filter'])) {			$year_filter = $this->request->get['year_filter'];		} else {			$date = strtotime(date('Y-m-d'));			$year_filter = date('Y',$date);;		}		if (isset($this->request->get['sort'])) {			$sort = $this->request->get['sort'];		} else {			$sort = 'c.customer_id';		}		if (isset($this->request->get['order'])) {			$order = $this->request->get['order'];		} else {			$order = 'ASC';		}		$this->load->model('report/customer');		$customers = array();		$filter_data = array(			'filter_name'              => $filter_name,			'filter_email'             => $filter_email,			'filter_username'          => $filter_username,			'filter_phone'             => $filter_phone,			'filter_customer_group_id' => $filter_customer_group_id,			'filter_status'            => $filter_status,			'filter_approved'          => $filter_approved,			'filter_date_added'        => $filter_date_added,			'filter_ip'                => $filter_ip,			'type_filter'			   => $type_filter,			'month_filter'			   => $month_filter,			'year_filter'			   => $year_filter,			'sort'                     => $sort,			'order'                    => $order		);		$type_hoivien = "";		if($type_filter == "filterUserNew"){			$results = $this->model_sale_customer->getCustomersNew($filter_data);			$type_hoivien = "HỘI VIÊN MỚI THÁNG:".$month_filter.' NĂM '.$year_filter;		}else if($type_filter == "filterUserNotHP"){			$results = $this->model_sale_customer->getCustomersNotHP($filter_data);			$type_hoivien = "HỘI VIÊN CHƯA ĐÓNG PHÍ THÁNG:".$month_filter.' NĂM '.$year_filter;		}else if($type_filter == "filterUserOff"){			$results = $this->model_sale_customer->getCustomersOff($filter_data);			$type_hoivien = "HỘI VIÊN BỊ OFF THÁNG:".$month_filter.' NĂM '.$year_filter;		}else if($type_filter == "filterUserCTP"){			$results = $this->model_sale_customer->getCustomersCTP($filter_data);			$type_hoivien = "CÔNG TÁC PHÍ CỦA HỘI VIÊN THÁNG:".$month_filter.' NĂM '.$year_filter;		}else {			$results = $this->model_sale_customer->getCustomers($filter_data);			$type_hoivien = "HỘI VIÊN";		}		$total_ctp_dukien = 0;		$total_ctp_thucte = 0;		foreach ($results as $result) {			if($type_filter != ""){				$ctp_dukien = $this->model_sale_customer->getAllProfitByTypeMonth($result['customer_id'],2,$month_filter,$year_filter);				$ctp_thucte = $this->model_sale_customer->getCTPThucTeByMonth($result['customer_id'],$month_filter,$year_filter);				$num_step  = $this->model_sale_customer->getSumFloorByDate($result['customer_id'],$month_filter,$year_filter);			}else{				$ctp_dukien = $this->model_sale_customer->getAllProfitByType($result['customer_id'],2);				$ctp_thucte = $this->model_sale_customer->getCTPThucTe($result['customer_id']);				$num_step  = $this->model_sale_customer->getSumFloor($result['customer_id']);			}			$total_ctp_dukien = $total_ctp_dukien + $ctp_dukien;			$total_ctp_thucte = $total_ctp_thucte + $ctp_thucte;			$customers[] = array(				'customer_id'    => $result['customer_id'],				'firstname'           => $result['firstname'],				'customer_code'       => $result['customer_code'],				'telephone'      => $result['telephone'].' ',				'cmnd'          => $result['cmnd'].' ',				'address_cus'          => $result['address_cus'],				'account_bank'          => $result['account_bank'],				'address_bank'          => $result['address_bank'],				'ma_thue'          => $result['ma_thue'].' ',				'name_parent'          => $this->model_sale_customer->getNameParent($result['p_node']),				'CTP_dukien'          => $ctp_dukien,				'CTP_thucte'          =>$ctp_thucte,				'month_add'          => $this->model_sale_customer->getMonthRegister($result['customer_id']),				'num_step'          => $num_step,				'date_added'     => date($this->language->get('date_format_short'), strtotime($result['date_added'])),				'date_birth'     => date($this->language->get('date_format_short'), strtotime($result['date_birth']))			);		}// Create new PHPExcel object$objPHPExcel = new PHPExcel();// Set document properties$objPHPExcel->getProperties()->setCreator("Hoivien")							 ->setLastModifiedBy("Hoivien")							 ->setTitle("Office 2007 XLSX".$this->language->get('heading_title'))							 ->setSubject("Office 2007 XLSX".$this->language->get('heading_title'))							 ->setDescription($this->language->get('heading_title'))							 ->setKeywords("office 2007 openxml php")							 ->setCategory("Test result file");// Add some data$objPHPExcel->getActiveSheet()->getStyle('G2')->getFont()->setSize(20)->setBold(true);$objPHPExcel->getActiveSheet()->setCellValue('G2','DANH SÁCH '.$type_hoivien);$objPHPExcel->setActiveSheetIndex(0)            ->setCellValue('A4', 'STT')            ->setCellValue('B4', 'Mã hội viên')            ->setCellValue('C4', 'Tên hội viên')            ->setCellValue('D4', 'Ngày sinh')            ->setCellValue('E4', 'CMND')            ->setCellValue('F4', 'Địa chỉ')            ->setCellValue('G4', 'Điện thoại')            ->setCellValue('H4', "TK ngân hàng")            ->setCellValue('I4', 'Chi nhánh')            ->setCellValue('J4', 'Mã số thuế')            ->setCellValue('K4', 'Mã thành viên giới thiệu')            ->setCellValue('L4', "Ngày tham gia")            ->setCellValue('M4', "Số tháng tham gia")            ->setCellValue('N4', "Số tầng")            ->setCellValue('O4', "Công tác phí dự kiến")            ->setCellValue('P4', 'Công tác phí thực tế')            ->setCellValue('Q4', "Tháng");$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(10);			$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);			$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);			$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);			$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);			$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(40);			$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20); 			$objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(30);			$objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(55);			$objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(20);			$objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(25); 			$objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(20);			$objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(10);			$objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(10);			$objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(25);			$objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(20);			$objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);$objPHPExcel->getActiveSheet()->getStyle('A4:Q4')			->applyFromArray(				array(					'fill' => array(						'type' => PHPExcel_Style_Fill::FILL_SOLID,						'color' => array('rgb' => '0066FF')					)				)			);$styleArray = array(				'font'  => array(					'bold'  => true,					'color' => array('rgb' => 'FFFFFF'),					'size'  => 12,					'name'  => 'Arial'				));$objPHPExcel->getActiveSheet()->getStyle('A4:Q4')->applyFromArray($styleArray);			$h=0;$n = 5;foreach ($customers as $customer) {	$h++;			$le_ctp = is_int($customer['CTP_thucte']+0)? 0:3;		$le_ctpdk = is_int($customer['CTP_dukien']+0)? 0:3;			$objPHPExcel->getActiveSheet()->setCellValue('A'.$n,$h);	$objPHPExcel->getActiveSheet()->setCellValue('B'.$n,$customer['customer_code']);	$objPHPExcel->getActiveSheet()->setCellValue('C'.$n,$customer['firstname']);	$objPHPExcel->getActiveSheet()->setCellValue('D'.$n,$customer['date_birth']);	$objPHPExcel->getActiveSheet()->setCellValue('E'.$n,$customer['cmnd']);	$objPHPExcel->getActiveSheet()->setCellValue('F'.$n,$customer['address_cus']);	$objPHPExcel->getActiveSheet()->setCellValue('G'.$n,$customer['telephone']);	$objPHPExcel->getActiveSheet()->setCellValue('H'.$n,$customer['account_bank'].' ');	$objPHPExcel->getActiveSheet()->setCellValue('I'.$n,$customer['address_bank']);	$objPHPExcel->getActiveSheet()->setCellValue('J'.$n,$customer['ma_thue']);	$objPHPExcel->getActiveSheet()->setCellValue('K'.$n,$customer['name_parent']);	$objPHPExcel->getActiveSheet()->setCellValue('L'.$n,$customer['date_added']);	$objPHPExcel->getActiveSheet()->setCellValue('M'.$n,$customer['month_add']);	$objPHPExcel->getActiveSheet()->setCellValue('N'.$n,$customer['num_step']);	$objPHPExcel->getActiveSheet()->setCellValue('O'.$n,number_format($customer['CTP_dukien'],$le_ctpdk,'.',','));	$objPHPExcel->getActiveSheet()->setCellValue('P'.$n,number_format($customer['CTP_thucte'],$le_ctp,'.',','));	if($type_filter != ""){		$objPHPExcel->getActiveSheet()->setCellValue('Q'.$n,$month_filter);	}else{		$objPHPExcel->getActiveSheet()->setCellValue('Q'.$n,'');	}	$n++;}$objPHPExcel->getActiveSheet()->getStyle('N'.$n.':'.'P'.$n)			->applyFromArray(				array('font'  => array(					'bold'  => true,					'size'  => 12,					'name'  => 'Arial'				))			);$le_tctp = is_int($total_ctp_thucte+0)? 0:3;	$le_tctpdk = is_int($total_ctp_dukien+0)? 0:3;$objPHPExcel->getActiveSheet()->setCellValue('N'.$n,'Tổng');$objPHPExcel->getActiveSheet()->setCellValue('O'.$n,number_format($total_ctp_dukien,$le_tctpdk,'.',','));$objPHPExcel->getActiveSheet()->setCellValue('P'.$n,number_format($total_ctp_thucte,$le_tctp,'.',','));// Rename worksheet$objPHPExcel->getActiveSheet()->setTitle($this->language->get('heading_title'));// Set active sheet index to the first sheet, so Excel opens this as the first sheet$objPHPExcel->setActiveSheetIndex(0);// Redirect output to a client’s web browser (Excel5)header('Content-Type: application/vnd.ms-excel');header('Content-Disposition: attachment;filename="hoivien.xls"');header('Cache-Control: max-age=0');// If you're serving to IE 9, then the following may be neededheader('Cache-Control: max-age=1');// If you're serving to IE over SSL, then the following may be neededheader ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the pastheader ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modifiedheader ('Cache-Control: cache, must-revalidate'); // HTTP/1.1header ('Pragma: public'); // HTTP/1.0$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');$objWriter->save('php://output');exit;	}}